-------
Page 12
-------
The following is a brief list of key problems inherent to the legacy approach:

- No source of truth.
o Networks often lack a source of truth: an authoritative artifact that can be referenced for what
the desired working configuration of a device or set of devices is.
o Often decentralized in project folders, file shares, Visio diagrams, Excel spreadsheets, and
local drives.
o Sometimes the network itself is the source of truth: the running-configurations of each device
is the only source of information about the network.

- Documentation.
o Documentation tends to fall out of date and requires manual updates when changes are made
to the network.
o Often missed or overlooked.
o Often decentralized.
o Rarely referenced by network operators due to above complications.

- Scale.
o Networks are not getting smaller. Internet of Things (IoT), wireless access points, IP phones,
rapid WAN expansion, cloud adoption, and larger data centers are leading to massive
enterprise networks.
o CLI simply does not scale unless more people are added to manage the network.

- Error-prone.
o Mistakes happen with manual changes.
o Requires orchestration of complex changes ensuring the correct order of device and
command entry.
o Requires work to be done several times per change. Plan, document, submit, and implement
into production.
o Sometimes approval processes or operational mistakes occur where changes are completed
out of order from when they were submitted, causing overwrites or outages.

- Large-scale changes.
o Deployment of new features often takes a very long time because of scale or complexity.
o New business requirements and device types connecting to the network may require QoS
policy changes leading to rewrite the QoS policy for every device.
o Some changes are avoided because the effort required to make a correction or deploy a
feature is too great.

- Limitations of available alternatives.
o Aside from CLI or an NMS there are very few alternatives to managing a network.
o Newer, intent-based solutions have only recently immerged with little proven capability.

- Talent.
o The complexity of networks has grown along with their size and scale. Virtualization,
multicast, QoS, STP, routing, routing protocols, cloud, security, firewalls, wireless, voice,
video, VSS, HSRP, VPN, 802.1x, along with increasingly complicated commands to gather
information.
o Staffing challenges such as finding certified IT staff or expanding network operations head
count. Every change to the network becomes a challenge as the complexity increases.

- Cost.
o Downtime and change window requirements.
o Overtime requirements.
o Large network operations staffing requirements.

-------
Page 15
-------
Understand the new processes and tools involved in network automation such as:

- Begin using TFS:
o Work items are created to identify, assign, and track progress on code development.
o Distributed teams are able to easily collaborate on shared work items.
o A centralized repository containing the Ansible playbooks as well as the resulting output
starts to evolve.

- Implement a branching strategy:
o A single, authoritative master branch represents the known working state and
configuration of the network.
o The master branch is protected. Changes are never made directly to the master branch.
o A working branch per change is created. Developers perform Git commits often within a
working branch.
o Approved pull requests are used to merge tested code from working branches into the
master branch.

- Version control is established on information gathering Ansible playbooks:
o In concert with the branching strategy version control becomes apparent.
o As Ansible playbooks are refactored over time TFS will contain the change and version
history.
o In addition to Ansible development skills, operators start to familiarize themselves with
Git.

- Playbook library:
o Network engineers can work with the network operations team to find the most common
manual commands used for network reconnaissance.
o These commands are transformed into automated playbooks that operations can start
using to troubleshoot or gather information from the network.
o Working playbooks are easily cloned, refactored, and added to the library by operators or
engineers.

-------
Page 16
-------
Here are some opportunities for tactical, one-time changes that can be
automated:

Application of standards or conventions:
o This can be a standard Network Time Protocol (NTP) server for all network devices or
ensuring the native VLAN is set correctly on all trunk ports.

Correcting errors:
o If there are known problems on the network that have been put off because of the scale of the
change, lack of priority, tedium, understanding of the amount of manual effort required, lack
of resources, or waiting for an automated solution to arrive.

Net-new projects:
o Draw a line in the sand and try to commit to automating all net-new project requirements that
require changes to the network

-------
Page 23
-------

PPDIOO
https://www.ciscopress.com/articles/article.asp?p=1608131&seqNum=3

-------
Page 26
-------

Use Ansible check and diff modes
https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_checkmode.html

-------
Page 27
-------

Ansible playbook tags
https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_tags.html

-------
Page 40
-------

Git branching guide
https://learn.microsoft.com/en-us/azure/devops/repos/git/git-branching-guidance?view=azure-devops&viewFallbackFrom=vsts

-------
Page 41
-------

interactive git branching guide
https://learngitbranching.js.org/

-------
Page 54
-------

Modern Network Development Lifecycle (NDLC)

 Create a repository specific to the environment in TFS:
o Examples include: Production, Lab, Development.
 Create a master branch:
o The master branch will be what is considered tested, approved, current, golden configurations
and code.
o Never develop or make changes directly inside the master branch.
o Use Git commits and pull requests to merge changes into the master branch.
o Playbooks should be executed from the master branch.
 Create a working branch:
o All changes performed in working branch.
o Playbook tested and validated possibly with check mode and verbosity.
o Changes understood.
o Commits from local repository made often to ensure TFS version updates often.
o Prevents local work from being lost.
o Ensures ability to collaborate on branches.
o Pull request to merge changes into master branch.
o An entire workflow can be created from the pull request.
o Various QA and approvals.
o Changes merged successfully into master branch.
 Clone repository locally:
o git clone
o Brings the repository down to a local Windows or Linux machine.
o Extremely portable provided Linux and Ansible are installed.
 Change to working branch:
o git checkout
o VS Code GUI to change into new working branch.
 Make changes:
o Modify existing files.
o Create new files.Chapter 3 How to Automate the Network? | 55
o Delete files.
 Stage changes:
o git add
o VS Code GUI to save local changes.
 Commit changes:
o git commit
o Using VS Code GUI.
o Add meaningful comment to the commit.
o Commit is referenced and available in TFS and VS Code.
 Push changes:
o git push
o VS Code synchronization.
o This finalizes the commit and pushes the files into the central repository.
 Pull request:
o A pull request in TFS is created to merge the working branch into the master branch.
o A full workflow can accompany this pull request that could require reviewers and approvals.
 Version and change control:
o All changes can be referred to by their pull request.
o Each pull request comprised of Git commits.
o Complete history of changes to all files available through TFS.
o Easy roll-backs.
o Easy troubleshooting problematic changes.

--------
TFS Link
--------

https://dev.azure.com/grahampaasch/automate_your_network